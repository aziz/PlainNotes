%YAML 1.2
---
name: Note
file_extensions:
  - note
scope: text.html.markdown.note
contexts:
  main:
    - match: |-
        (?x)^
        (?= [ ]{,3}>
        | ([ ]{4}|\t)(?!$)
        | [#]{1}\s*+
        | [#]{2}\s*+   # these seems a bit stupid, but it's the only
        | [#]{3}\s*+   # way I found to add heading number to the scope
        | [#]{4}\s*+   # sublime does not support dynamic scope names
        | [#]{5}\s*+   # like textmate does! it's a bummer!
        | [#]{6}\s*+
        | [ ]{,3}(?<marker>[-*_])([ ]{,2}\k<marker>){2,}[ \t]*+$
        | [ ]{,3}(([\|\+])([^\|\n]+)){2,}([\|\+]+)[ \t]*$  # table
        )
      comment: |
        We could also use an empty end match and set
        applyEndPatternLast, but then we must be sure that the begin
        pattern will only match stuff matched by the sub-patterns.
      push:
        - meta_scope: meta.block-level.markdown
        - match: |-
            (?x)^
            (?! [ ]{,3}>
            | ([ ]{4}|\t)
            | [#]{1,6}\s*+
            | [ ]{,3}(?<marker>[-*_])([ ]{,2}\k<marker>){2,}[ \t]*+$
            | [ ]{,3}(([\|\+])([^\|\n]+)){2,}([\|\+]+)[ \t]*$ # table
            )
          pop: true
        - include: block_quote
        - include: block_raw
        - include: headings
        - include: separator
        - include: table
    - match: '^[ ]{0,3}([*+-])([ ]\[([ xX✘✔])\])?(?=\s)'
      captures:
        1: punctuation.definition.list_item.markdown
        2: markup.checkbox.markdown
        3: markup.checkbox.checked_symbol.markdown
      push:
        - meta_scope: markup.list.unnumbered.markdown
        - match: ^(?=\S)
          captures:
            1: punctuation.definition.list_item.markdown
            2: markup.checkbox.markdown
            3: markup.checkbox.checked_symbol.markdown
          pop: true
        - include: block_quote
        - include: block_raw
        - include: scope:text.html.markdown.note.fenced
        - include: list-paragraph
    - match: '^[ ]{0,3}([0-9]+)(\.)([ ]\[([ xX✘✔])\])?(?=\s)'
      captures:
        1: punctuation.definition.list_item.markdown punctuation.definition.list_item.number.markdown
        2: punctuation.definition.list_item.markdown
        3: markup.checkbox.markdown
        4: markup.checkbox.checked_symbol.markdown
      push:
        - meta_scope: markup.list.numbered.markdown
        - match: ^(?=\S)
          captures:
            1: punctuation.definition.list_item.markdown punctuation.definition.list_item.number.markdown
            2: punctuation.definition.list_item.markdown
            3: markup.checkbox.markdown
            4: markup.checkbox.checked_symbol.markdown
          pop: true
        - include: block_quote
        - include: block_raw
        - include: scope:text.html.markdown.note.fenced
        - include: list-paragraph
    - match: '^[ ]{0,3}(?:(✘)|(✔)|(☐)){1}(?=\s)'
      captures:
        1: punctuation.definition.list_item.todo.cancelled.markdown
        2: punctuation.definition.list_item.todo.done.markdown
        3: punctuation.definition.list_item.todo.pending.markdown
      push:
        - meta_scope: markup.list.unnumbered.todo.markdown
        - match: ^(?=\S)
          captures:
            1: punctuation.definition.list_item.todo.cancelled.markdown
            2: punctuation.definition.list_item.todo.done.markdown
            3: punctuation.definition.list_item.todo.pending.markdown
          pop: true
        - include: block_quote
        - include: block_raw
        - include: scope:text.html.markdown.note.fenced
        - include: list-paragraph
    - include: scope:text.html.markdown.note.fenced
    - match: '^(?=<(p|div|section|address|audio|video|canvas|figcaption|figure|output|article|aside|header|footer|main|h[1-6]|blockquote|pre|table|dd|dl|ol|ul|script|noscript|form|fieldset|iframe|math|ins|del)\b[^>]*>)(?!.*?</\1>)'
      comment: Markdown formatting is disabled inside block-level tags.
      push:
        - meta_scope: meta.disable-markdown
        - match: (?<=^</\1>$\n)
          pop: true
        - include: scope:text.html.basic
    - match: '^(?=<(p|div|section|address|audio|video|canvas|figcaption|figure|output|article|aside|header|footer|main|h[1-6]|blockquote|pre|table|dd|dl|ol|ul|script|noscript|form|fieldset|iframe|math|ins|del)\b[^>]*>)'
      comment: Same rule but for one line disables.
      push:
        - meta_scope: meta.disable-markdown
        - match: $\n?
          pop: true
        - include: scope:text.html.basic
    - match: |-
        (?x:
          \s*           # Leading whitespace
          (\[)(.+?)(\])(:)    # Reference name
          [ \t]*          # Optional whitespace
          (<?)(\S+?)(>?)      # The url
          [ \t]*          # Optional whitespace
          (?:
              ((\().+?(\)))   # Match title in quotes…
            | ((['"]).+?(['"]))   # or in parens.
          )?            # Title is optional
          [ \t]*            # Optional whitespace
          $
        )
      scope: meta.link.reference.def.markdown
      captures:
        1: punctuation.definition.constant.markdown
        2: constant.other.reference.link.markdown
        3: punctuation.definition.constant.markdown
        4: punctuation.separator.key-value.markdown
        5: punctuation.definition.link.markdown
        6: markup.underline.link.markdown
        7: punctuation.definition.link.markdown
        8: string.other.link.description.title.markdown
        9: punctuation.definition.string.begin.markdown
        10: punctuation.definition.string.end.markdown
        11: string.other.link.description.title.markdown
        12: punctuation.definition.string.begin.markdown
        13: punctuation.definition.string.end.markdown
    - match: '^(!!!)[ \t]+(?i:(hint|tip|HINT|TIP|Hint|Tip))(?:[ \t]+(\")(.+)(\"))?[ \t]*\n'
      captures:
        0: markup.admonition.header.markdown
        1: punctuation.definition.admonition.markdown
        2: entity.name.admonition.markdown
        3: punctuation.definition.admonition.markdown
        4: string.other.admonition.title.markdown
        5: punctuation.definition.admonition.markdown
      push:
        - meta_scope: markup.admonition.markdown.hint
        - match: ^$
          pop: true
        - include: admonition
    - match: '^(!!!)[ \t]+(?i:(warning|caution|Warning|Caution|WARNING|CAUTION))(?:[ \t]+(\")(.+)(\"))?[ \t]*\n'
      captures:
        0: markup.admonition.header.markdown
        1: punctuation.definition.admonition.markdown
        2: entity.name.admonition.markdown
        3: punctuation.definition.admonition.markdown
        4: string.other.admonition.title.markdown
        5: punctuation.definition.admonition.markdown
      push:
        - meta_scope: markup.admonition.markdown.warning
        - match: ^$
          pop: true
        - include: admonition
    - match: '^(!!!)[ \t]+(?i:(danger|error|Danger|Error|DANGER|ERROR))(?:[ \t]+(\")(.+)(\"))?[ \t]*\n'
      captures:
        0: markup.admonition.header.markdown
        1: punctuation.definition.admonition.markdown
        2: entity.name.admonition.markdown
        3: punctuation.definition.admonition.markdown
        4: string.other.admonition.title.markdown
        5: punctuation.definition.admonition.markdown
      push:
        - meta_scope: markup.admonition.markdown.danger
        - match: ^$
          pop: true
        - include: admonition
    - match: '^(!!!)[ \t]+(?i:(attention|Attention|ATTENTION))(?:[ \t]+(\")(.+)(\"))?[ \t]*\n'
      captures:
        0: markup.admonition.header.markdown
        1: punctuation.definition.admonition.markdown
        2: entity.name.admonition.markdown
        3: punctuation.definition.admonition.markdown
        4: string.other.admonition.title.markdown
        5: punctuation.definition.admonition.markdown
      push:
        - meta_scope: markup.admonition.markdown.attention
        - match: ^$
          pop: true
        - include: admonition
    - match: '^(!!!)[ \t]+(\w+)(?:[ \t]+(\")(.+)(\"))?[ \t]*\n'
      captures:
        0: markup.admonition.header.markdown
        1: punctuation.definition.admonition.markdown
        2: entity.name.admonition.markdown
        3: punctuation.definition.admonition.markdown
        4: string.other.admonition.title.markdown
        5: punctuation.definition.admonition.markdown
      push:
        - meta_scope: markup.admonition.markdown
        - match: '^[ \t]{0,3}$'
          pop: true
        - include: admonition
    - match: '^(\*)(\[)(.+?)(\])(:)(.+)$'
      scope: meta.abbreviation.def.markdown
      captures:
        1: punctuation.definition.abbreviation.markdown
        2: punctuation.definition.abbreviation.begin.markdown
        3: meta.abbreviation.constant.markdown
        4: punctuation.definition.abbreviation.end.markdown
        5: punctuation.definition.abbreviation.markdown
        6: meta.abbreviation.def.string.markdown
    - match: '^(\{:)\s*(#[\w-]+\s+|\.[\w-]+\s+|[\w-]+=["''].+?["'']\s+)+\s*(\})$'
      scope: meta.attr_list.markdown
      captures:
        1: punctuation.definition.attr_list.markdown
        3: punctuation.definition.attr_list.markdown
    - match: '^(?=\S|[ ]{1,3})(?![=-]{3,}(?=$))'
      push:
        - meta_scope: meta.paragraph.markdown
        - match: '^(?:\s*$|(?=[ ]{,3}>)|(?=```|~~~)|(?=\*\[.+?\]:.+$)|(?=\{:.+?\}\s*$)|(?=[ ]{0,3}([*+-✔✘☐])(?=\s)))|(?=[ \t]*\n)(?<=^===|^====|=====|^---|^----|-----)[ \t]*\n|(?=^#)'
          pop: true
        - include: inline
        - include: scope:text.html.basic
        - match: '^(={3,})(?=[ \t]*$)'
          scope: markup.heading.1.markdown.note
          captures:
            1: punctuation.definition.heading.markdown
        - match: '^(-{3,})(?=[ \t]*$)'
          scope: markup.heading.2.markdown.note
          captures:
            1: punctuation.definition.heading.markdown
    - match: ^\s*$
      scope: meta.empty_line.markdown
  admonition:
    - include: scope:text.html.markdown.note.fenced
    - match: '\G([ ]{4}|\t)'
      push:
        - meta_scope: markup.admonition.body.markdown
        - match: '\G[ ]{0,3}(>)[ ]?'
          captures:
            1: punctuation.definition.blockquote.markdown
          push:
            - meta_scope: markup.quote.markdown
            - match: |-
                (?x)\G([ ]{4,}|\t)?
                (?= \s*$
                | [ ]{,3}(?<marker>[-*_])([ ]{,2}\k<marker>){2,}[ \t]*+$
                | [ ]{,3}>
                )
              pop: true
            - include: main
            - include: inline
            - include: block_raw
            - include: headings
            - include: separator
            - match: |-
                (?x)
                  \G[ ]{0,3}([*+-])([ ]\[([ xX✘✔])\])?(?=\s) |
                  \G[ ]{0,3}([0-9]+)(\.)([ ]\[([ xX✘✔])\])?(?=\s) |
                  \G[ ]{0,3}(?:(✘)|(✔)|(☐)){1}(?=\s)
              captures:
                1: punctuation.definition.list_item.markdown
                2: markup.checkbox.markdown
                3: markup.checkbox.checked_symbol.markdown
                4: punctuation.definition.list_item.markdown punctuation.definition.list_item.number.markdown
                5: punctuation.definition.list_item.markdown
                6: markup.checkbox.markdown
                7: markup.checkbox.checked_symbol.markdown
                8: punctuation.definition.list_item.todo.cancelled.markdown
                9: punctuation.definition.list_item.todo.done.markdown
                10: punctuation.definition.list_item.todo.pending.markdown
              push:
                - meta_scope: markup.list
                - match: (?<=\n)
                  captures:
                    1: punctuation.definition.list_item.markdown
                    2: markup.checkbox.markdown
                    3: markup.checkbox.checked_symbol.markdown
                    4: punctuation.definition.list_item.markdown punctuation.definition.list_item.number.markdown
                    5: punctuation.definition.list_item.markdown
                    6: markup.checkbox.markdown
                    7: markup.checkbox.checked_symbol.markdown
                    8: punctuation.definition.list_item.todo.cancelled.markdown
                    9: punctuation.definition.list_item.todo.done.markdown
                    10: punctuation.definition.list_item.todo.pending.markdown
                  pop: true
        - match: |-
            (?x)
              \G[ ]{0,3}([*+-])([ ]\[([ xX✘✔])\])?(?=\s) |
              \G[ ]{0,3}([0-9]+)(\.)([ ]\[([ xX✘✔])\])?(?=\s) |
              \G[ ]{0,3}(?:(✘)|(✔)|(☐)){1}(?=\s)
          captures:
            1: punctuation.definition.list_item.markdown
            2: markup.checkbox.markdown
            3: markup.checkbox.checked_symbol.markdown
            4: punctuation.definition.list_item.markdown punctuation.definition.list_item.number.markdown
            5: punctuation.definition.list_item.markdown
            6: markup.checkbox.markdown
            7: markup.checkbox.checked_symbol.markdown
            8: punctuation.definition.list_item.todo.cancelled.markdown
            9: punctuation.definition.list_item.todo.done.markdown
            10: punctuation.definition.list_item.todo.pending.markdown
          push:
            - meta_scope: markup.list
            - match: (?<=\n)
              captures:
                1: punctuation.definition.list_item.markdown
                2: markup.checkbox.markdown
                3: markup.checkbox.checked_symbol.markdown
                4: punctuation.definition.list_item.markdown punctuation.definition.list_item.number.markdown
                5: punctuation.definition.list_item.markdown
                6: markup.checkbox.markdown
                7: markup.checkbox.checked_symbol.markdown
                8: punctuation.definition.list_item.todo.cancelled.markdown
                9: punctuation.definition.list_item.todo.done.markdown
                10: punctuation.definition.list_item.todo.pending.markdown
              pop: true
            - include: list-paragraph
        - include: block_raw
        - include: table
        - include: headings
        - include: separator
        - include: inline
        - include: scope:text.html.basic
        - match: (?<=\n)
          pop: true
  ampersand:
    - match: "&(?!([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+);)"
      comment: |
        Markdown will convert this for us. We match it so that the
                HTML grammar will not mark it up as invalid.
      scope: meta.other.valid-ampersand.markdown
  block_quote:
    - match: '\G[ ]{,3}(>)[ ]?'
      comment: |
        We terminate the block quote when seeing an empty line, a
                separator or a line with leading > characters. The latter is
                to “reset” the quote level for quoted lines.
      captures:
        1: punctuation.definition.blockquote.markdown
      push:
        - meta_scope: markup.quote.markdown
        - match: |-
            (?x)^
            (?= \s*$
            | [ ]{,3}(?<marker>[-*_])([ ]{,2}\k<marker>){2,}[ \t]*+$
            | [ ]{,3}>
            )
          pop: true
        - match: |-
            (?x)\G
            (?= [ ]{,3}>
            )
          push:
            - match: ^
              pop: true
            - include: block_quote
        - match: |-
            (?x)\G
            (?= ([ ]{4}|\t)
            | [#]{1,6}\s*+
            | [ ]{,3}(?<marker>[-*_])([ ]{,2}\k<marker>){2,}[ \t]*+$
            )
          push:
            - include: block_raw
            - include: headings
            - include: separator
            - match: ^
              pop: true
        - match: |-
            (?x)\G
            (?! $
            | [ ]{,3}>
            | ([ ]{4}|\t)
            | [#]{1,6}\s*+
            | [ ]{,3}(?<marker>[-*_])([ ]{,2}\k<marker>){2,}[ \t]*+$
            )
          push:
            - match: $|(?<=\n)
              pop: true
            - match: |-
                (?x:
                   \G[ ]{,3}([*+-])[ ](\[([ xX✘✔])\])(.+)$          # after an unordered list
                  |\G[ ]{0,3}([0-9]+)(\.)[ ](\[([ xX✘✔])\])(.+)$    # after an ordered list
                )
              scope: meta.paragraph.list.markdown
              captures:
                1: punctuation.definition.list_item.markdown
                2: markup.checkbox.markdown
                3: markup.checkbox.checked_symbol.markdown
                4: meta.paragraph.list.markdown
                5: punctuation.definition.list_item.markdown punctuation.definition.list_item.number.markdown
                6: punctuation.definition.list_item.markdown
                7: markup.checkbox.markdown
                8: markup.checkbox.checked_symbol.markdown
                9: meta.paragraph.list.markdown
            - match: '\G[ ]{,3}([*+-])\s+(.+)$'
              captures:
                1: punctuation.definition.list_item.markdown
                2: meta.paragraph.list.markdown
            - match: '\G[ ]{,3}([✔])\s+(.+)$'
              captures:
                1: punctuation.definition.list_item.todo.done.markdown
                2: meta.paragraph.list.todo.markdown
            - match: '\G[ ]{,3}([✘])\s+(.+)$'
              captures:
                1: punctuation.definition.list_item.todo.cancelled.markdown
                2: meta.paragraph.list.todo.markdown
            - match: '\G[ ]{,3}([☐])\s+(.+)$'
              captures:
                1: punctuation.definition.list_item.todo.pending.markdown
                2: meta.paragraph.list.todo.markdown
            - match: '\G[ ]{0,3}([0-9]+)(\.)\s+(.+)$'
              captures:
                1: punctuation.definition.list_item.markdown punctuation.definition.list_item.number.markdown
                2: punctuation.definition.list_item.markdown
                3: meta.paragraph.list.markdown
            - include: inline
            - include: scope:text.html.basic
  block_raw:
    - match: '\G([ ]{4}|\t).*$\n?'
      scope: markup.raw.block.markdown
  bold:
    - match: |-
        (?x)
          (?<![a-zA-Z0-9])(\*\*|__)(?=\S)                # Open
          (?=
            (
                <[^>]*+>             # HTML tags
              | (?<raw>`+)([^`]|(?!(?<!`)\k<raw>(?!`))`)*+\k<raw>
                                # Raw
              | \\[\\`*_{}\[\]()#.!+\->]?+     # Escapes
              | \[
              (
                      (?<square>          # Named group
                    [^\[\]\\]       # Match most chars
                        | \\.           # Escaped chars
                        | \[ \g<square>*+ \]    # Nested brackets
                      )*+
                \]
                (
                  (             # Reference Link
                    [ ]?          # Optional space
                    \[[^\]]*+\]       # Ref name
                  )
                  | (             # Inline Link
                    \(            # Opening paren
                      [ \t]*+       # Optional whtiespace
                      <?(.*?)>?     # URL
                      [ \t]*+       # Optional whtiespace
                      (         # Optional Title
                        (?<title>['"])
                        (.*?)
                        \k<title>
                      )?
                    \)
                  )
                )
              )
              | (?!(?<=\S)\1).           # Everything besides
                                # style closer
            )++
            (?<=\S)\1                # Close
          )
      captures:
        1: punctuation.definition.bold.markdown
      push:
        - meta_scope: markup.bold.markdown
        - match: (?<=\S)(\1)
          captures:
            1: punctuation.definition.bold.markdown
          pop: true
        - match: "(?=<[^>]*?>)"
          push:
            - include: scope:text.html.basic
            - match: (?<=>)
              pop: true
        - include: escape
        - include: ampersand
        - include: bracket
        - include: raw
        - include: italic
        - include: strikethrough
        - include: image-inline
        - include: link-inline
        - include: link-inet
        - include: link-email
        - include: image-ref
        - include: link-ref-literal
        - include: link-ref
        - include: link-internal
  bracket:
    - match: '<(?![a-z/?\$!])'
      comment: |
        Markdown will convert this for us. We match it so that the
                HTML grammar will not mark it up as invalid.
      scope: meta.other.valid-bracket.markdown
  escape:
    - match: '\\[-`*_#+.!(){}\[\]\\>]'
      scope: constant.character.escape.markdown
  heading1:
    - match: '\G(#{1})(?!#)[ \t]*(?=\S)'
      captures:
        1: punctuation.definition.heading.1.markdown
      push:
        - meta_scope: markup.heading.1.markdown.note
        - meta_content_scope: entity.name.section.markdown
        - match: '[ \t]*(#*)\n?$'
          captures:
            1: punctuation.definition.heading.1.markdown
          pop: true
        - include: inline
  heading2:
    - match: '\G(#{2})(?!#)\s*(?=\S)'
      captures:
        1: punctuation.definition.heading.2.markdown
      push:
        - meta_scope: markup.heading.2.markdown.note
        - meta_content_scope: entity.name.section.markdown
        - match: '[ \t]*(#*)$\n?'
          captures:
            1: punctuation.definition.heading.2.markdown
          pop: true
        - include: inline
  heading3:
    - match: '\G(#{3})(?!#)\s*(?=\S)'
      captures:
        1: punctuation.definition.heading.3.markdown
      push:
        - meta_scope: markup.heading.3.markdown.note
        - meta_content_scope: entity.name.section.markdown
        - match: '[ \t]*(#*)$\n?'
          captures:
            1: punctuation.definition.heading.3.markdown
          pop: true
        - include: inline
  heading4:
    - match: '\G(#{4})(?!#)\s*(?=\S)'
      captures:
        1: punctuation.definition.heading.4.markdown
      push:
        - meta_scope: markup.heading.4.markdown.note
        - meta_content_scope: entity.name.section.markdown
        - match: '[ \t]*(#*)$\n?'
          captures:
            1: punctuation.definition.heading.4.markdown
          pop: true
        - include: inline
  heading5:
    - match: '\G(#{5})(?!#)\s*(?=\S)'
      captures:
        1: punctuation.definition.heading.5.markdown
      push:
        - meta_scope: markup.heading.5.markdown.note
        - meta_content_scope: entity.name.section.markdown
        - match: '[ \t]*(#*)$\n?'
          captures:
            1: punctuation.definition.heading.5.markdown
          pop: true
        - include: inline
  heading6:
    - match: '\G(#{6})(?!#)\s*(?=\S)'
      captures:
        1: punctuation.definition.heading.6.markdown
      push:
        - meta_scope: markup.heading.6.markdown.note
        - meta_content_scope: entity.name.section.markdown
        - match: '[ \t]*(#*)$\n?'
          captures:
            1: punctuation.definition.heading.6.markdown
          pop: true
        - include: inline
  headings:
    - include: heading1
    - include: heading2
    - include: heading3
    - include: heading4
    - include: heading5
    - include: heading6
  image-inline:
    - match: |-
        (?x:
         \!              # Images start with !
         (\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])
                       # Match the link text.
         ([ ])?            # Space not allowed
         (\()            # Opening paren for url
           (<?)(\S+?)(>?)      # The url
           [ \t]*          # Optional whitespace
           (?:
               ((\().+?(\)))   # Match title in parens…
             | ((").+?("))   # or in quotes.
           )?            # Title is optional
           \s*           # Optional whitespace
         (\))
        )
      scope: meta.image.inline.markdown
      captures:
        1: punctuation.definition.string.begin.markdown
        2: string.other.link.description.markdown
        4: punctuation.definition.string.end.markdown
        5: invalid.illegal.whitespace.markdown
        6: punctuation.definition.metadata.markdown
        7: punctuation.definition.link.markdown
        8: markup.underline.link.image.markdown
        9: punctuation.definition.link.markdown
        10: string.other.link.description.title.markdown
        11: punctuation.definition.string.markdown
        12: punctuation.definition.string.markdown
        13: string.other.link.description.title.markdown
        14: punctuation.definition.string.markdown
        15: punctuation.definition.string.markdown
        16: punctuation.definition.metadata.markdown
  image-ref:
    - match: '\!(\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])[ ]?(\[)(.*?)(\])'
      scope: meta.image.reference.markdown
      captures:
        1: punctuation.definition.string.begin.markdown
        2: string.other.link.description.markdown
        4: punctuation.definition.string.begin.markdown
        5: punctuation.definition.constant.markdown
        6: constant.other.reference.link.markdown
        7: punctuation.definition.constant.markdown
  inline:
    - include: escape
    - include: ampersand
    - include: bracket
    - include: raw
    - include: bold
    - include: italic
    - include: strikethrough
    - include: line-break
    - include: image-inline
    - include: link-inline
    - include: link-inet
    - include: link-email
    - include: link-internal
    - include: image-ref
    - include: link-ref-literal
    - include: link-ref
    - include: note-tag
    - include: note-tag-begin
  italic:
    - match: |-
        (?x)
          (?<![a-zA-Z0-9])(\*|_)(?=\S)               # Open
          (?=
            (
                <[^>]*+>             # HTML tags
              | (?<raw>`+)([^`]|(?!(?<!`)\k<raw>(?!`))`)*+\k<raw>
                                # Raw
              | \\[\\`*_{}\[\]()#.!+\->]?+     # Escapes
              | \[
              (
                      (?<square>          # Named group
                    [^\[\]\\]       # Match most chars
                        | \\.           # Escaped chars
                        | \[ \g<square>*+ \]    # Nested brackets
                      )*+
                \]
                (
                  (             # Reference Link
                    [ ]?          # Optional space
                    \[[^\]]*+\]       # Ref name
                  )
                  | (             # Inline Link
                    \(            # Opening paren
                      [ \t]*+       # Optional whtiespace
                      <?(.*?)>?     # URL
                      [ \t]*+       # Optional whtiespace
                      (         # Optional Title
                        (?<title>['"])
                        (.*?)
                        \k<title>
                      )?
                    \)
                  )
                )
              )
              | \1\1                # Must be bold closer
              | (?!(?<=\S)\1).           # Everything besides
                                # style closer
            )++
            (?<=\S)\1                # Close
          )
      captures:
        1: punctuation.definition.italic.markdown
      push:
        - meta_scope: markup.italic.markdown
        - match: (?<=\S)(\1)((?!\1)|(?=\1\1))
          captures:
            1: punctuation.definition.italic.markdown
          pop: true
        - match: "(?=<[^>]*?>)"
          push:
            - include: scope:text.html.basic
            - match: (?<=>)
              pop: true
        - include: escape
        - include: ampersand
        - include: bracket
        - include: raw
        - include: bold
        - include: strikethrough
        - include: image-inline
        - include: link-inline
        - include: link-inet
        - include: link-email
        - include: image-ref
        - include: link-ref-literal
        - include: link-ref
        - include: link-internal
  line-break:
    - match: " {2,}$"
      scope: meta.dummy.line-break
  link-email:
    - match: '(<)?((?:mailto:)?[-+.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)(>)?'
      scope: meta.link.email.lt-gt.markdown
      captures:
        1: punctuation.definition.link.markdown
        2: markup.underline.link.markdown
        4: punctuation.definition.link.markdown
  link-inet:
    - match: '(<)?(\b(?:https?|ftp|file|git):///?[^\s()<>\[\]]+)(>)?'
      scope: meta.link.inet.markdown
      captures:
        1: punctuation.definition.link.markdown
        2: markup.underline.link.markdown
        3: punctuation.definition.link.markdown
  link-inline:
    - match: |-
        (?x:
         (\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])
                       # Match the link text.
         ([ ])?            # Space not allowed
         (\()            # Opening paren for url
           (<?)(.*?)(>?)     # The url
           [ \t]*          # Optional whitespace
           (?:
               ((\().+?(\)))   # Match title in parens…
             | ((").+?("))   # or in quotes.
           )?            # Title is optional
           \s*           # Optional whitespace
         (\))
        )
      scope: meta.link.inline.markdown
      captures:
        1: punctuation.definition.string.begin.markdown
        2: string.other.link.title.markdown
        4: punctuation.definition.string.end.markdown
        5: invalid.illegal.whitespace.markdown
        6: punctuation.definition.metadata.markdown
        7: punctuation.definition.link.markdown
        8: markup.underline.link.markdown
        9: punctuation.definition.link.markdown
        10: string.other.link.description.title.markdown
        11: punctuation.definition.string.begin.markdown
        12: punctuation.definition.string.end.markdown
        13: string.other.link.description.title.markdown
        14: punctuation.definition.string.begin.markdown
        15: punctuation.definition.string.end.markdown
        16: punctuation.definition.metadata.markdown
  link-internal:
    - match: '(?<![a-zA-Z0-9_])(\[\[)(?![\s])(.*?)?((?<![\s])\]\](?![a-zA-Z0-9_]))'
      scope: meta.link.internal.markdown.note
      captures:
        1: punctuation.definition.link.internal.begin.markdown.note
        2: string.other.link.internal.title.markdown.note
        3: punctuation.definition.link.internal.end.markdown.note
  link-ref:
    - match: '(\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])[ ]?(\[)([^\]]*+)(\])'
      scope: meta.link.reference.markdown
      captures:
        1: punctuation.definition.string.begin.markdown
        2: string.other.link.title.markdown
        4: punctuation.definition.string.end.markdown
        5: punctuation.definition.constant.begin.markdown
        6: constant.other.reference.link.markdown
        7: punctuation.definition.constant.end.markdown
  link-ref-literal:
    - match: '(\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])[ ]?(\[)(\])'
      scope: meta.link.reference.literal.markdown
      captures:
        1: punctuation.definition.string.begin.markdown
        2: string.other.link.title.markdown
        4: punctuation.definition.string.end.markdown
        5: punctuation.definition.constant.begin.markdown
        6: punctuation.definition.constant.end.markdown
  list-paragraph:
    - match: \G\s+(?=\S)
      push:
        - meta_scope: meta.paragraph.list.markdown
        - match: '^\s*$|(?=\{:.+?\}\s*$)'
          pop: true
        - match: '^(?:[ \t]+)?([*+-])(?=\s)'
          scope: punctuation.definition.list_item.markdown
        - match: |-
            (?x:
              (?<=[\+\-\*]{1})[ ]\[([ xX✘✔])\](?=\s)                             # after an unordered list
              | (?<=\d\.|\d\d\.|\d\d\d\.|\d\d\d\d.)[ \t]+\[([ xX✘✔])\](?=\s)     # after an ordered list
            )
          scope: markup.checkbox.markdown
          captures:
            1: markup.checkbox.checked_symbol.markdown
            2: markup.checkbox.checked_symbol.markdown
        - match: |-
            (?x:
              (?<=\G[\+\-\*]{1,1})[ ][☐](?=\s)                             # after an unordered list
              | (?<=\G\d\.|\G\d\d\.|\G\d\d\d\.|\G\d\d\d\d.)[ \t]+[☐](?=\s)   # after an ordered list
              | \G(?:[ \t]+)?([☐])(?=\s)                                    # as the bullet
            )
          scope: punctuation.definition.list_item.todo.pending.markdown
        - match: |-
            (?x:
              (?<=\G[\+\-\*]{1,1})[ ][✔](?=\s)                             # after an unordered list
              | (?<=\G\d\.|\G\d\d\.|\G\d\d\d\.|\G\d\d\d\d.)[ \t]+[✔](?=\s)   # after an ordered list
              | \G(?:[ \t]+)?([✔])(?=\s)                                    # as the bullet
            )
          scope: punctuation.definition.list_item.todo.done.markdown
        - match: |-
            (?x:
              (?<=\G[\+\-\*]{1,1})[ ][✘](?=\s)                             # after an unordered list
              | (?<=\G\d\.|\G\d\d\.|\G\d\d\d\.|\G\d\d\d\d.)[ \t]+[✘](?=\s)   # after an ordered list
              | \G(?:[ \t]+)?([✘])(?=\s)                                    # as the bullet
            )
          scope: punctuation.definition.list_item.todo.cancelled.markdown
        - match: '^(?:[ \t]+)?([0-9]+)(\.)(?=\s)'
          captures:
            1: punctuation.definition.list_item.markdown punctuation.definition.list_item.number.markdown
            2: punctuation.definition.list_item.markdown
        - include: inline
        - include: scope:text.html.basic
        - include: scope:text.html.markdown.note.fenced
  note-tag:
    - match: |-
        (?x)
          ((?<=:)(?:\w|[+-]\w)[^: ]*)   # tag text should have : before it
          (:(?=([^: ]+:)*\s))   # the end dot
      scope: meta.note_tag.markdown.note
      captures:
        1: string.other.note_tag.title.markdown.note
        2: punctuation.definition.note_tag.markdown.note
  note-tag-begin:
    - match: ':(?=((?:\w|[+-]\w)[^: ]*:){1,}\s)'
      scope: punctuation.definition.note_tag.markdown.note
  raw:
    - match: |-
        (?x)
          (`+)
          (
            (?:
              [^`]
              | (?<=\\)[`]
              | (?!(?<!`)\1(?!`))`)*+
          )
          (\1)
      scope: markup.raw.inline.markdown
      captures:
        1: punctuation.definition.raw.markdown
        2: markup.raw.inline.content.markdown
        3: punctuation.definition.raw.markdown
  separator:
    - match: '\G[ ]{,3}([-*_])([ ]{,2}\1){2,}[ \t]*$\n?'
      scope: meta.separator.markdown
  strikethrough:
    - match: |-
        (?x)
          (?<!\w)(~~)(?=[^\s~])                # Open
          (?=
            (
                <[^>]*+>             # HTML tags
              | (?<raw>`+)([^`]|(?!(?<!`)\k<raw>(?!`))`)*+\k<raw>
                                # Raw
              | \\[\\`*_{}\[\]()#.!+\->]?+     # Escapes
              | \[
              (
                      (?<square>          # Named group
                    [^\[\]\\]       # Match most chars
                        | \\.           # Escaped chars
                        | \[ \g<square>*+ \]    # Nested brackets
                      )*+
                \]
                (
                  (             # Reference Link
                    [ ]?          # Optional space
                    \[[^\]]*+\]       # Ref name
                  )
                  | (             # Inline Link
                    \(            # Opening paren
                      [ \t]*+       # Optional whtiespace
                      <?(.*?)>?     # URL
                      [ \t]*+       # Optional whtiespace
                      (         # Optional Title
                        (?<title>['"])
                        (.*?)
                        \k<title>
                      )?
                    \)
                  )
                )
              )
              | (?!(?<=\S)\1).           # Everything besides
                                # style closer
            )++
          )
      captures:
        1: punctuation.definition.strikethrough.markdown
      push:
        - meta_scope: markup.strikethrough.markdown
        - match: (?<=\S)(\1)
          captures:
            1: punctuation.definition.strikethrough.markdown
          pop: true
        - match: "(?=<[^>]*?>)"
          push:
            - include: scope:text.html.basic
            - match: (?<=>)
              pop: true
        - include: escape
        - include: ampersand
        - include: bracket
        - include: raw
        - include: bold
        - include: italic
        - include: image-inline
        - include: link-inline
        - include: link-inet
        - include: link-email
        - include: image-ref
        - include: link-ref-literal
        - include: link-ref
        - include: link-internal
  table:
    - match: '(?<=^|^ |^  |^   |\G)([\|\+])'
      captures:
        1: punctuation.definition.table.vertical-line.markdown
      push:
        - meta_scope: markup.table.markdown
        - match: '([\|\+])(?=[ \t]*$)'
          captures:
            1: punctuation.definition.table.vertical-line.markdown
          pop: true
        - match: (\|)
          comment: |
            finding table rows for marking the vertical bars
                        do not follow | if it has -= at least 2
          captures:
            1: punctuation.definition.table.vertical-line.markdown
        - match: '(?<=[^\w])(?:[ ]+)?([-=+:]+(?=(?:[ ]?)[\|\+]))'
          captures:
            1: punctuation.definition.table.horizontal-line.markdown
        - match: '([>#<]+(?=(?:[ ]?)[\|\+]))'
          captures:
            1: punctuation.definition.table.alignments.markdown
        - include: inline
